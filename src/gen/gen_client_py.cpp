/*-----------------------------------------------------------------------
 * This file is part of TrueBlocks-RPC, which is a near-complete rewrite
 * of libjson-rpc-cpp removing anything not directly needed to support
 * an Ethereum RPC client and server. It retains the original license
 * as described in LICENSE.txt
 * @author  Peter Spiess-Knafl <dev@spiessknafl.at>
 * @author  Thomas Jay Rush <jrush@quickblocks.io> (rewrite 2021)
 *---------------------------------------------------------------------*/
#include <algorithm>

#include <gen/gen.h>

using namespace std;
using namespace jsonrpc;

//---------------------------------------------------------------------------------------
extern const char* TEMPLATE_PYTHON_CLIENT_SIGCLASS;
extern const char* TEMPLATE_PYTHON_CLIENT_SIGCONSTRUCTOR;
extern const char* TEMPLATE_PYTHON_NAMED_ASSIGNMENT;
extern const char* TEMPLATE_PYTHON_POSITION_ASSIGNMENT;

//---------------------------------------------------------------------------------------
void PythonClientCodeGenerator::generateStub() {
    writeLine("#");
    writeLine("# This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!");
    writeLine("#");
    writeNewLine();
    writeLine("#");
    writeLine("# To use this client, jsonrpc_pyclient must be installed:");
    writeLine("# pip install jsonrpc_pyclient");
    writeLine("#");
    writeNewLine();
    writeLine("from jsonrpc_pyclient import client");
    writeNewLine();

    writeLine(substitute(TEMPLATE_PYTHON_CLIENT_SIGCLASS, "<stubname>", stubname));
    increaseIndentation();

    writeLine(substitute(TEMPLATE_PYTHON_CLIENT_SIGCONSTRUCTOR, "<stubname>", stubname));
    writeNewLine();

    for (unsigned int i = 0; i < procedures.size(); i++) {
        generateMethod(procedures[i]);
    }

    decreaseIndentation();
    writeNewLine();
}

//---------------------------------------------------------------------------------------
void PythonClientCodeGenerator::generateMethod(Procedure& proc) {
    stringstream param_string;
    parameterNameList_t list = proc.GetParameters();
    for (parameterNameList_t::iterator it = list.begin(); it != list.end(); ++it) {
        param_string << ", ";
        param_string << it->first;
    }
    *output << indent() << "def " << normalize(proc.GetName());
    *output << "(self" << param_string.str() << "):" << endl;

    (void)indentIn();
    generateAssignments(proc);
    *output << endl;

    *output << indent() << "result = self.call_method(\'" << proc.GetName() << "\', parameters)" << endl;
    *output << indent() << "return result" << endl;
    *output << endl;

    (void)indentOut();
}

//---------------------------------------------------------------------------------------
void PythonClientCodeGenerator::generateAssignments(Procedure& proc) {
    string assignment;
    parameterNameList_t list = proc.GetParameters();
    if (list.size() > 0) {
        param_t declType = proc.GetParameterDecType();
        if (proc.GetParameterDecType() == PARAMS_BY_NAME) {
            writeLine("parameters = {}");
        } else if (proc.GetParameterDecType() == PARAMS_BY_POSITION) {
            writeLine("parameters = []");
        }

        for (parameterNameList_t::iterator it = list.begin(); it != list.end(); ++it) {
            if (declType == PARAMS_BY_NAME) {
                assignment = TEMPLATE_PYTHON_NAMED_ASSIGNMENT;
            } else {
                assignment = TEMPLATE_PYTHON_POSITION_ASSIGNMENT;
            }
            replaceAll(assignment, "<paramname>", it->first);
            writeLine(assignment);
        }
    } else {
        writeLine("parameters = None");
    }
}

//---------------------------------------------------------------------------------------
const char* TEMPLATE_PYTHON_CLIENT_SIGCLASS = "class <stubname>(client.Client):";
const char* TEMPLATE_PYTHON_CLIENT_SIGCONSTRUCTOR =
    "def __init__(self, connector, version='2.0'):\n        super(<stubname>, self).__init__(connector, version)";
const char* TEMPLATE_PYTHON_NAMED_ASSIGNMENT = "parameters[\'<paramname>\'] = <paramname>";
const char* TEMPLATE_PYTHON_POSITION_ASSIGNMENT = "parameters.append(<paramname>)";

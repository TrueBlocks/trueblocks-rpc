/*-----------------------------------------------------------------------
 * This file is part of TrueBlocks-RPC, which is a near-complete rewrite
 * of libjson-rpc-cpp removing anything not directly needed to support
 * an Ethereum RPC client and server. It retains the original license
 * as described in LICENSE.txt
 * @author  Peter Spiess-Knafl <dev@spiessknafl.at>
 * @author  Thomas Jay Rush <jrush@quickblocks.io> (rewrite 2021)
 *---------------------------------------------------------------------*/
#include <algorithm>

#include <gen/gen.h>

using namespace std;
using namespace jsonrpc;

//---------------------------------------------------------------------------------------
extern string isCppConversion(jsontype_t type);
extern string toCppConversion(jsontype_t type);

//---------------------------------------------------------------------------------------
namespace jsonrpc {
    const char* TEMPLATE_CPP_FILEPROLOG =
        "/**\n"
        " * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!\n"
        " */\n"
        "\n"
        "#pragma once\n"
        "\n"
        "#include <rpclib/rpclib.h>\n";
}

//---------------------------------------------------------------------------------------
void CppClientCodeGenerator::generateStub() {
    StringVector parts;
    splitPackages(stubname, parts);
    string className = parts.at(parts.size() - 1);

    *output << TEMPLATE_CPP_FILEPROLOG << endl;
    int depth = namespaceOpen(stubname);
    *output << indent() << "class " << className << " : public jsonrpc::Client {" << endl;
    *output << indent() << "public:" << endl;
    *output << indentIn() << className << "(jsonrpc::HttpClient &conn) : jsonrpc::Client(conn) {}" << endl;
    for (auto proc : procedures) {
        string name = proc.GetName();
        string funcName = normalize(name);
        string returnType = toCppReturnType(proc.GetType());
        *output << indent() << "// Implements client side of " << funcName << endl;
        *output << indent() << returnType << " " << funcName << "(";
        bool first = true;
        for (auto param : proc.GetParameters()) {
            if (!first)
                *output << ", ";
            *output << toCppParamType(param.second) << " " << param.first;
            first = false;
        }
        *output << ") {" << endl;
        (void)indentIn();
        {
            *output << indent() << "jsonval_t p;" << endl;
            if (proc.nParams() == 0) {
                *output << indent() << "p = Json::nullValue;" << endl;
            } else {
                parameterNameList_t list = proc.GetParameters();
                for (auto param : list) {
                    if (proc.GetParameterDecType() == PARAMS_BY_NAME) {
                        *output << indent() << "p[\"" << param.first << "\"] = " << param.first << ";" << endl;
                    } else {
                        *output << indent() << "p.append(" + param.first + ");" << endl;
                    }
                }
            }

            *output << indent() << "jsonval_t result = CallMethod(\"" << name << "\",p);" << endl;
            *output << indent() << "if (result" << isCppConversion(proc.GetType()) << ")" << endl;
            *output << indentIn() << "return result" << toCppConversion(proc.GetType()) << ";" << endl;
            *output << indentOut() << "else" << endl;
            *output
                << indentIn()
                << "throw jsonrpc::JsonRpcException(jsonrpc::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());"
                << endl;
        }
        (void)indentOut();
        *output << indentOut() << "}" << endl;
    }
    *output << indentOut() << "};" << endl;
    namespaceClose(depth);
}

//---------------------------------------------------------------------------------------
string toCppReturnType(jsontype_t type) {
    switch (type) {
        case JSON_BOOLEAN:
            return "bool";
        case JSON_INTEGER:
            return "int";
        case JSON_REAL:
            return "double";
        case JSON_NUMERIC:
            return "double";
        case JSON_STRING:
            return "string";
        case JSON_OBJECT:
        case JSON_ARRAY:
        default:
            return "jsonval_t";
    }
    return "";
}

//---------------------------------------------------------------------------------------
string toCppParamType(jsontype_t type) {
    switch (type) {
        case JSON_BOOLEAN:
        case JSON_INTEGER:
        case JSON_REAL:
        case JSON_NUMERIC:
            return toCppReturnType(type);
        case JSON_STRING:
        case JSON_OBJECT:
        case JSON_ARRAY:
            return "const " + toCppReturnType(type) + "&";
        default:
            return toCppReturnType(type);
    }
    return "";
}

//---------------------------------------------------------------------------------------
string isCppConversion(jsontype_t type) {
    string result;
    switch (type) {
        case JSON_BOOLEAN:
            result = ".isBool()";
            break;
        case JSON_INTEGER:
            result = ".isIntegral()";
            break;
        case JSON_REAL:
            result = ".isDouble()";
            break;
        case JSON_NUMERIC:
            result = ".isNumeric()";
            break;
        case JSON_STRING:
            result = ".isString()";
            break;
        case JSON_OBJECT:
            result = ".isObject()";
            break;
        case JSON_ARRAY:
            result = ".isArray()";
            break;
    }
    return result;
}

//---------------------------------------------------------------------------------------
string toCppConversion(jsontype_t type) {
    string result;
    switch (type) {
        case JSON_BOOLEAN:
            result = ".asBool()";
            break;
        case JSON_INTEGER:
            result = ".asInt()";
            break;
        case JSON_REAL:
            result = ".asDouble()";
            break;
        case JSON_NUMERIC:
            result = ".asDouble()";
            break;
        case JSON_STRING:
            result = ".asString()";
            break;
        case JSON_OBJECT:
        case JSON_ARRAY:
        default:
            result = "";
            break;
    }
    return result;
}
